{"version":3,"sources":["user.actions.test.js"],"names":["middlewares","mockStore","mockProfileData","name","money","t","deepEqual","type","profile","getOnce","expectedActions","store","dispatch","then","console","log","getActions"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAWA;AACA,MAAMA,cAAc,sBAApB;AACA,MAAMC,YAAY,8BAAmBD,WAAnB,CAAlB;;AAEA,MAAME,kBAAkB;AACpBC,UAAM,KADc;AAEpBC,WAAO;AAFa,CAAxB;;AAKA;AACA,mBAAK,yDAAL,EAAgEC,KAAK;AACjEA,MAAEC,SAAF,CAAY,sBAAWJ,eAAX,CAAZ,EAAyC;AACrCK,+BADqC;AAErCC,iBAASN;AAF4B,KAAzC;AAIH,CALD;;AAOA,mBAAK,8EAAL,EAAqFG,KAAK;AACtF;AACA,wBAAUI,OAAV,eAA2BP,eAA3B;AACA;AACA;AACA;AACA,UAAMQ,kBAAkB,CACpB;AACIH,+BADJ;AAEIC,iBAASN;AAFb,KADoB,CAAxB;;AAOA,UAAMS,QAAQV,UAAU,EAAEO,SAAS,EAAX,EAAV,CAAd;AACA,WAAOG,MAAMC,QAAN,CAAe,uBAAf,EAA6BC,IAA7B,CAAkC,MAAM;AAC3CC,gBAAQC,GAAR,CAAY,kBAAZ,EAAgCJ,MAAMK,UAAN,EAAhC;AACAX,UAAEC,SAAF,CAAYK,MAAMK,UAAN,EAAZ,EAAgCN,eAAhC;AACH,KAHM,CAAP;AAIH,CAlBD","file":"user.actions.test.js","sourcesContent":["import test from 'ava';\nimport fetchMock from 'fetch-mock';\nimport configureMockStore from 'redux-mock-store';\nimport thunk from 'redux-thunk';\nimport { LOGIN, PROFILE } from '../../../constants/routes/api';\nimport {\n    SET_PROFILE,\n    setProfile,\n    getProfile,\n    SET_DAILY_BUDGET,\n    setDailyBudget,\n    updateProfile,\n    loginFail,\n    login\n} from './user.actions';\n\n/* Mock Values */\nconst middlewares = [thunk]\nconst mockStore = configureMockStore(middlewares)\n\nconst mockProfileData = {\n    name: 'Joe',\n    money: 1122334455.19,\n};\n\n/* Test Suite */\ntest('should create an action to set the user\\'s profile info', t => {\n    t.deepEqual(setProfile(mockProfileData), {\n        type: SET_PROFILE,\n        profile: mockProfileData,\n    });\n});\n\ntest('should fetch the user\\'s profile from the server and dispatch the set action', t => {\n    // const mockDispatch = spy();\n    fetchMock.getOnce(PROFILE, mockProfileData);\n    // console.log('result: ', getProfile()(mockDispatch));\n    // console.log('spy: ', mockDispatch.callCount);\n    // console.log('spy first call: ', mockDispatch.firstCall);\n    const expectedActions = [\n        {\n            type: SET_PROFILE,\n            profile: mockProfileData,\n        },\n    ];\n\n    const store = mockStore({ profile: {} })\n    return store.dispatch(getProfile()).then(() => {\n        console.log('actual actions: ', store.getActions());\n        t.deepEqual(store.getActions(), expectedActions);\n    });\n});\n"]}