'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _fetchMock = require('fetch-mock');

var _fetchMock2 = _interopRequireDefault(_fetchMock);

var _reduxMockStore = require('redux-mock-store');

var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _api = require('../../../constants/routes/api');

var _user = require('./user.actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Mock Values */
const middlewares = [_reduxThunk2.default];
const mockStore = (0, _reduxMockStore2.default)(middlewares);

const mockProfileData = {
    name: 'Joe',
    money: 1122334455.19
};

/* Test Suite */
(0, _ava2.default)('should create an action to set the user\'s profile info', t => {
    t.deepEqual((0, _user.setProfile)(mockProfileData), {
        type: _user.SET_PROFILE,
        profile: mockProfileData
    });
});

(0, _ava2.default)('should fetch the user\'s profile from the server and dispatch the set action', t => {
    // const mockDispatch = spy();
    _fetchMock2.default.getOnce(_api.PROFILE, mockProfileData);
    // console.log('result: ', getProfile()(mockDispatch));
    // console.log('spy: ', mockDispatch.callCount);
    // console.log('spy first call: ', mockDispatch.firstCall);
    const expectedActions = [{
        type: _user.SET_PROFILE,
        profile: mockProfileData
    }];

    const store = mockStore({ profile: {} });
    return store.dispatch((0, _user.getProfile)()).then(() => {
        console.log('actual actions: ', store.getActions());
        t.deepEqual(store.getActions(), expectedActions);
    });
});
//# sourceMappingURL=node_modules/.cache/ava/b79c6b8414804bc01ccd17b2b6e23b5e.js.map